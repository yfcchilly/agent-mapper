apply plugin: 'java'
apply plugin: 'base'
apply plugin: 'maven-publish'

group 'com.ng.trade'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    byteBuddyVersion = '1.10.9'
    shadowVersion = '2.0.4'
    springBootVersion = '1.5.20.RELEASE'
    fastjsonVersion = '1.2.68'
    lombokVersion = '1.16.18'
    slf4jVersion = '1.7.25'
    mybatisSpringVersion = '1.3.2'
    mysqlVersion = '5.1.37'
}

buildscript {
    ext {
        shadowVersion = '2.0.4'
        springBootVersion = '1.5.20.RELEASE'
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowVersion"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    repositories {
        mavenLocal()
        maven { url 'https://maven.aliyun.com/repository/public' }
        mavenCentral()
    }

    configurations {
        all*.exclude group: "ch.qos.logback"
    }
}

project(":agent") {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'maven-publish'

    jar {
        manifest {
            attributes(
                    'Premain-Class': 'com.ng.agent.AgentBoot',
                    'Agent-Class': 'com.ng.agent.AgentBoot',
                    'Can-Redefine-Classes': 'true',
                    'Can-Retransform-Classes': 'true',
                    'Can-Set-Native-Method-Prefix': 'true',
                    'Implementation-Version': this.version
            )
        }
    }

    shadowJar {
        classifier = null
        dependencies {
            include(dependency("net.bytebuddy:byte-buddy:$byteBuddyVersion"))
            include(dependency("net.bytebuddy:byte-buddy-agent:$byteBuddyVersion"))
        }

        relocate 'com.alibaba', 'com.pdd.paas.wormhole.agent.alibaba'
        exclude 'mozilla/public-suffix-list.txt'
    }

    dependencies {
        compile "net.bytebuddy:byte-buddy:$byteBuddyVersion"
        compile "net.bytebuddy:byte-buddy-agent:$byteBuddyVersion"
    }

    task repackageJar(type: Jar) {
        archiveName "ng-agent-${this.version}-bin.jar"

        entryCompression = ZipEntryCompression.STORED
        into ('/') {
            from (project.zipTree("build/libs/agent.jar"))
        }

        manifest {
            from project.jar.manifest
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifact source: repackageJar, classifier: 'bin', extension: 'jar'
            }
        }
    }

    shadowJar.mustRunAfter jar
    repackageJar.mustRunAfter shadowJar
    publishToMavenLocal.dependsOn shadowJar
    publish.dependsOn shadowJar
}


project(":service") {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'

    dependencies {
        // commons tools third-party
        compile "org.projectlombok:lombok:$lombokVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"
        compile "com.alibaba:fastjson:$fastjsonVersion"

        // framework middleware
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile "org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion"

        compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
        compile "org.mybatis.spring.boot:mybatis-spring-boot-starter:$mybatisSpringVersion"
        compile "mysql:mysql-connector-java:$mysqlVersion"

        testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
            exclude(module: 'commons-logging')
        }
    }
}
